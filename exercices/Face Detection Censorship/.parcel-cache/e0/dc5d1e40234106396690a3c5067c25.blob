const video = document.querySelector('.webcam');
const canvas = document.querySelector('.video');
const ctx = canvas.getContext('2d'); // where we do the drawing

const faceCanvas = document.querySelector('.face');
const faceCtx = faceCanvas.getContext('2d');
const faceDetector = new window.FaceDetector();
const options = {
  SIZE: 20,
  SCALE: 1.35
}; // write a function that populate the users video

async function populateVideo() {
  // grab feed of user webcam.
  const stream = await navigator.mediaDevices.getUserMedia({
    video: {
      width: 1280,
      height: 720
    }
  });
  video.srcObject = stream;
  await video.play(); // because play take a second or minutes to play that's why we put await
  // Size the canvas to be the same size as the video

  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;
  faceCanvas.width = video.videoWidth;
  faceCanvas.height = video.videoHeight;
}

async function detect() {
  const faces = await faceDetector.detect(video); // Ask the browser when the next animation frame is and tell it to run the detect for us.

  faces.forEach(drawFace);
  faces.forEach(censor);
  requestAnimationFrame(detect); // running it infinitely
}

function drawFace(face) {
  const {
    width,
    height,
    top,
    left
  } = face.boundingBox;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.strokeStyle = '#ffc600';
  ctx.lineWidth = 2;
  ctx.strokeRect(width, height, top, left);
}

function censor({
  boundingBox: face
}) {
  faceCtx.imageSmoothingEnabled = false;
  faceCtx.clearRect(0, 0, faceCanvas.width, faceCanvas.height); // Draw the small face

  faceCtx.drawImage( // 5 sources args
  video, // where does the source come from
  face.x, // where do we start the source pull from
  face.y, face.width, face.height, // 4 draw args
  face.x, face.y, options.SIZE, options.SIZE);
  const width = face.width * options.SCALE;
  const height = face.height * options.SCALE; // DRAW the small face back on but scale it

  faceCtx.drawImage(faceCanvas, // source
  face.x, // where do we start the source pull from?
  face.y, options.SIZE, options.SIZE, // Drawing args
  face.x - (width - face.width) / 2, face.y - (height - face.height) / 2, width, height); // Take that face back and draw it back at normal
}

populateVideo().then(detect);